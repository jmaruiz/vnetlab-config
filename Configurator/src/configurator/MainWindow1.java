/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package configurator;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author joser
 */
public class MainWindow1 extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow1
     */
    public MainWindow1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        newVm = new javax.swing.JButton();
        newHub = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        consoleLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        hubPanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Open a configuration file...");
        fileChooser.setFileFilter(new configFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(775, 500));
        setPreferredSize(new java.awt.Dimension(775, 500));

        newVm.setText("New VM");
        newVm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newVmActionPerformed(evt);
            }
        });

        newHub.setText("New Hub");
        newHub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newHubActionPerformed(evt);
            }
        });

        jLabel1.setText("Console:");

        jScrollPane1.setHorizontalScrollBar(null);

        mainPanel.setPreferredSize(new java.awt.Dimension(345, 0));
        mainPanel.setLayout(new javax.swing.BoxLayout(mainPanel, javax.swing.BoxLayout.Y_AXIS));

        hubPanel.setMaximumSize(new java.awt.Dimension(350, 32767));
        hubPanel.setPreferredSize(new java.awt.Dimension(345, 0));
        hubPanel.setLayout(new javax.swing.BoxLayout(hubPanel, javax.swing.BoxLayout.Y_AXIS));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(hubPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(hubPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(consoleLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newVm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newHub)
                        .addGap(0, 613, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newVm)
                    .addComponent(newHub))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(consoleLbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    HashMap<String, VM> vmMap = new HashMap<>();
    HashMap<String, Hub> hubMap = new HashMap<>();
    HashMap<String, JButton> buttonsMap = new HashMap<>();
    ImageIcon vmIcon = new javax.swing.ImageIcon(getClass().getResource("/configurator/images/vm.jpg"));
    ImageIcon hubIcon = new javax.swing.ImageIcon(getClass().getResource("/configurator/images/hub.jpg"));
    
    public void createNetItem(String type, String name) {
        switch (type) {
            case "vm":
                {
                    VM item = new VM(name);
                    vmMap.put(name, item);
                    publishItem(item);
                    this.setConsole("VM " + name + " created successfully.");
                    break;
                }
            case "hub":
                {
                    Hub item = new Hub(name);
                    hubMap.put(name, item);
                    publishItem(item);
                    this.setConsole("Hub " + name + " created successfully.");
                    break;
                }
            default:
                System.out.println("Invalid item type. Should be vm or hub.");
                break;
        }
    }
    
    public void publishItem(VM item) {
        //mainPanel.setLayout(new FlowLayout(FlowLayout.LEADING, 20, 20));
        //mainPanel.setLayout(new BoxLayout(mainPanel, 1));
        JButton button = new JButton(item.name);
        button.setVerticalTextPosition(SwingConstants.BOTTOM);
        button.setHorizontalTextPosition(SwingConstants.CENTER);
        button.setAlignmentX(Component.CENTER_ALIGNMENT);
        buttonsMap.put(item.name, button);
        VM net = vmMap.get(item.name);
        MainWindow1 main = this;
        button.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
              //System.out.println(net.name);
              EditWindow editor = new EditWindow(main);
              editor.changeName(net.name); editor.changeOs(net.os); 
              editor.changeVer(net.ver); editor.changeSrc(net.src); 
              editor.changeEth0(net.eth0); editor.changeEth1(net.eth1);
              editor.changeEth2(net.eth2);
              editor.setNetItem(net);
              editor.setVisible(true);
            }
        }); 
        button.setIcon(vmIcon);
        mainPanel.add(button);
        mainPanel.revalidate();
        validate();
    }
    
    public void publishItem(Hub item) {
        //hubPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 20));
        //hubPanel.setLayout(new BoxLayout(hubPanel, 1));
        JButton button = new JButton(item.name);
        button.setVerticalTextPosition(SwingConstants.BOTTOM);
        button.setHorizontalTextPosition(SwingConstants.CENTER);
        button.setAlignmentX(Component.CENTER_ALIGNMENT);
        buttonsMap.put(item.name, button);
        Hub net = hubMap.get(item.name);
        MainWindow1 main = this;
        button.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
              //System.out.println(net.name);
              EditWindowHub editor = new EditWindowHub(main);
              editor.changeName(net.name); editor.changeInf(net.inf); 
              editor.changeSubnet(net.subnet); editor.changeMask(net.netmask);
              editor.setNetItem(net);
              editor.setVisible(true);
            }
        });
        button.setIcon(hubIcon);
        hubPanel.add(button);
        hubPanel.revalidate();
        validate();
    }
    
    public boolean deleteItem (String name) {
        if (vmMap.get(name) != null) {
            for (Hub hub : hubMap.values()) {
                hub.removeVM(name);
            }
            mainPanel.remove(buttonsMap.get(name));
            mainPanel.revalidate();
            mainPanel.repaint();
            vmMap.remove(name);
            this.setConsole(name + " has been removed successfully.");
            return true;
        } else if (hubMap.get(name) != null) {
            for (VM vm : vmMap.values()) {
                vm.removeHub(hubMap.get(name).getInternal());
            }
            mainPanel.remove(buttonsMap.get(name));
            mainPanel.revalidate();
            mainPanel.repaint();
            hubMap.remove(name);
            this.setConsole(name + " has been removed successfully.");
            return true;
        } else {
            this.setConsole("That network item doesn't exist!");
            return false;
        }
    }
    
    public void setConsole(String text) {
        consoleLbl.setText(text);
    }
    
    public HashMap<String, VM> getVmItems() {
        return vmMap;
    }
    
    public HashMap<String, Hub> getHubItems() {
        return hubMap;
    }
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
              // What to do with the file, e.g. display it in a TextArea
              Parser parser = new Parser(new FileReader(file.getAbsolutePath()));
              
              vmMap = parser.getVmMap();
              hubMap = parser.getHubMap();
              
              for (VM item : vmMap.values()) {
                  publishItem(item);
              }
              for (Hub item : hubMap.values()) {
                  publishItem(item);
              }
              this.setConsole("File opened successfully.");
            } catch (IOException ex) {
              System.out.println("problem accessing file " + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void newVmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newVmActionPerformed
        JFrame frame = new JFrame("Create a new vm");
        String name = JOptionPane.showInputDialog(frame, "Enter a name:");
        consoleLbl.setText("");
        if (name != null && !name.equals("")){
            name = name.replaceAll("\\s+","");
            if (vmMap.get(name) != null) {
                consoleLbl.setText("ERROR - network item with that name already exists!");
            } else {
                createNetItem("vm", name);
            }
        }
    }//GEN-LAST:event_newVmActionPerformed

    private void newHubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newHubActionPerformed
        JFrame frame = new JFrame("Create a new hub");
        String name = JOptionPane.showInputDialog(frame, "Enter a name:");
        consoleLbl.setText("");
        if (name != null && !name.equals("")){
            name = name.replaceAll("\\s+","");
            if (hubMap.get(name) != null) {
                consoleLbl.setText("ERROR - network item with that name already exists!");
            } else {
                createNetItem("hub", name);
            }
        }
    }//GEN-LAST:event_newHubActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JFrame frame = new JFrame("About Configurator");
        String aboutString = 
            "This app was created and programmed for CSET 3600 (University of Toledo)\n"
          + "Group 4 consists of the following:\n"
          + "Jose Ruiz\nEdison Williams\nJeff Wang\nAlex Borger\nCharles Hempstead\n";
        JOptionPane.showMessageDialog(frame, aboutString);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        Writer writer = new Writer();
        String finalstr;
        finalstr = "";
        
        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            
            for (VM item : vmMap.values()) {
                finalstr += item.generateString();
            }
            for (Hub item : hubMap.values()) {
                finalstr += item.generateString();
            }
            finalstr += "partial_solution {\n";
            for (VM item : vmMap.values()) {
                finalstr += item.getSolutionString();
            }
            if (finalstr.charAt(finalstr.length()-2)==',') {
                finalstr = finalstr.substring(0, finalstr.length()-2);
            }
            finalstr += "\n}\n";
            
            
            try {
                configurator.Writer.writeCfg(finalstr, new File(file.getAbsolutePath() ));
                this.setConsole("File saved.");
            } catch (IOException ex) {
                Logger.getLogger(MainWindow1.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
        
        
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JLabel consoleLbl;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPanel hubPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton newHub;
    private javax.swing.JButton newVm;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    // End of variables declaration//GEN-END:variables

}
